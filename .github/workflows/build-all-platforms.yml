name: Build VST - All Platforms

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

permissions:
  contents: write
  actions: read
  pull-requests: write

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup MSVC
        uses: microsoft/setup-msbuild@v1

      - name: Configure CMake
        working-directory: vst
        run: |
          cmake -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release

      - name: Build
        working-directory: vst
        run: |
          cmake --build build --config Release

      - name: Upload Windows VST
        uses: actions/upload-artifact@v4
        with:
          name: ObsidianNeural-Windows-VST3
          path: vst/build/ObsidianNeuralVST_artefacts/Release/VST3/

  build-macos:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          brew install cmake ninja create-dmg

      - name: Configure CMake
        working-directory: vst
        run: |
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release

      - name: Build
        working-directory: vst
        run: |
          cmake --build build --config Release

      - name: Upload macOS VST
        uses: actions/upload-artifact@v4
        with:
          name: ObsidianNeural-macOS-VST3
          path: vst/build/ObsidianNeuralVST_artefacts/Release/VST3/

  build-linux:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake ninja-build \
            libasound2-dev \
            libx11-dev libxext-dev libxrandr-dev libxcomposite-dev \
            libxinerama-dev libxcursor-dev \
            libfreetype6-dev \
            libfontconfig1-dev \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libcurl4-openssl-dev

      - name: Configure CMake
        working-directory: vst
        run: |
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release

      - name: Build
        working-directory: vst
        run: |
          cmake --build build --config Release

      - name: Upload Linux VST
        uses: actions/upload-artifact@v4
        with:
          name: ObsidianNeural-Linux-VST3
          path: vst/build/ObsidianNeuralVST_artefacts/Release/VST3/

  build-python-executables:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: linux

          - os: macos-latest
            name: macos

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        shell: bash
        run: |
          pip install pillow pyinstaller psutil pystray GPUtil

      - name: Build executables
        shell: bash
        run: |
          pyinstaller --onefile --hidden-import=psutil --hidden-import=pystray --hidden-import=GPUtil --name obsidian-server-${{ matrix.name }} server_interface.py
          pyinstaller --onefile --hidden-import=psutil --hidden-import=pystray --hidden-import=GPUtil --name obsidian-installer-${{ matrix.name }} installer.py

      - name: Upload Python executables
        uses: actions/upload-artifact@v4
        with:
          name: ObsidianNeural-Python-${{ matrix.name }}
          path: dist/

  build-macos-packages:
    needs: [build-python-executables]
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install create-dmg
        run: brew install create-dmg

      - name: Download macOS Python executables
        uses: actions/download-artifact@v4
        with:
          name: ObsidianNeural-Python-macos
          path: ./python-tools/

      - name: Create DMG with installer
        run: |
          mkdir -p dmg-staging

          # Copy installer
          cp python-tools/obsidian-installer-macos dmg-staging/OBSIDIAN-Neural-Installer
          chmod +x dmg-staging/OBSIDIAN-Neural-Installer

      - name: Create DMG
        run: |
          create-dmg \
            --volname "OBSIDIAN-Neural-Installer" \
            --window-pos 200 120 \
            --window-size 500 300 \
            --icon-size 100 \
            --icon "OBSIDIAN-Neural-Installer" 250 150 \
            --hide-extension "OBSIDIAN-Neural-Installer" \
            "OBSIDIAN-Neural-Installer-macOS.dmg" \
            "dmg-staging/"

      - name: Upload DMG
        uses: actions/upload-artifact@v4
        with:
          name: ObsidianNeural-macOS-DMG
          path: OBSIDIAN-Neural-Installer-macOS.dmg

      - name: Prepare PKG payload
        run: |
          mkdir -p pkg-staging/payload/usr/local/bin
          mkdir -p pkg-staging/scripts

          # Copy installer to payload
          cp python-tools/obsidian-installer-macos pkg-staging/payload/usr/local/bin/obsidian-installer
          chmod +x pkg-staging/payload/usr/local/bin/obsidian-installer

          # Copy server to payload
          cp python-tools/obsidian-server-macos pkg-staging/payload/usr/local/bin/obsidian-server
          chmod +x pkg-staging/payload/usr/local/bin/obsidian-server

      - name: Create postinstall script
        run: |
          cat > pkg-staging/scripts/postinstall << 'EOF'
          #!/bin/bash
          ln -sf /usr/local/bin/obsidian-installer /usr/local/bin/obsidian-neural
          echo "OBSIDIAN-Neural installed successfully!"
          echo "Available commands:"
          echo "  obsidian-neural    - Run installer"
          echo "  obsidian-server    - Run server directly"
          echo "  obsidian-installer - Run installer directly"
          exit 0
          EOF
          chmod +x pkg-staging/scripts/postinstall

      - name: Build PKG
        run: |
          pkgbuild \
            --root pkg-staging/payload \
            --identifier com.obsidianneural.installer \
            --version "1.0.${{ github.run_number }}" \
            --scripts pkg-staging/scripts \
            --install-location / \
            OBSIDIAN-Neural-Installer-macOS.pkg

      - name: Upload PKG
        uses: actions/upload-artifact@v4
        with:
          name: ObsidianNeural-macOS-PKG
          path: OBSIDIAN-Neural-Installer-macOS.pkg

  commit-binaries:
    needs: [build-python-executables]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - name: Download Python artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ObsidianNeural-Python-*
          merge-multiple: false

      - name: Organize binaries
        run: |
          rm -rf bin/*
          mkdir -p bin

          if [ -d "ObsidianNeural-Python-macos" ]; then
            cp ObsidianNeural-Python-macos/obsidian-server-macos bin/OBSIDIAN-Neural-Server-macos
          fi

          if [ -d "ObsidianNeural-Python-linux" ]; then
            cp ObsidianNeural-Python-linux/obsidian-server-linux bin/OBSIDIAN-Neural-Server-linux
          fi

      - name: Commit binaries
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add bin/
          git commit -m "Update binaries [skip ci]" || exit 0
          git push

  create-release:
    needs:
      [
        build-windows,
        build-macos,
        build-linux,
        build-python-executables,
        build-macos-packages,
        commit-binaries,
      ]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create release assets
        run: |
          # Copy installer.py for Windows users
          cp installer.py ./OBSIDIAN-Neural-Installer.py

          # VST3 plugins
          if [ -d "ObsidianNeural-Windows-VST3" ]; then
            cd ObsidianNeural-Windows-VST3
            zip -r ../OBSIDIAN-Neural-Windows-VST3.zip .
            cd ..
          fi

          if [ -d "ObsidianNeural-macOS-VST3" ]; then
            cd ObsidianNeural-macOS-VST3
            zip -r ../OBSIDIAN-Neural-macOS-VST3.zip .
            cd ..
          fi

          if [ -d "ObsidianNeural-Linux-VST3" ]; then
            cd ObsidianNeural-Linux-VST3
            tar -czf ../OBSIDIAN-Neural-Linux-VST3.tar.gz .
            cd ..
          fi

          # Copy DMG
          if [ -f "ObsidianNeural-macOS-DMG/OBSIDIAN-Neural-Installer-macOS.dmg" ]; then
            cp "ObsidianNeural-macOS-DMG/OBSIDIAN-Neural-Installer-macOS.dmg" ./
          fi

          # Linux installer
          if [ -d "ObsidianNeural-Python-linux" ]; then
            cp ObsidianNeural-Python-linux/obsidian-installer-linux ./OBSIDIAN-Neural-Installer-Linux
          fi

          # Copy PKG
          if [ -f "ObsidianNeural-macOS-PKG/OBSIDIAN-Neural-Installer-macOS.pkg" ]; then
            cp "ObsidianNeural-macOS-PKG/OBSIDIAN-Neural-Installer-macOS.pkg" ./
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: "OBSIDIAN-Neural v${{ github.run_number }}"
          body: |
            ## 🎵 OBSIDIAN-Neural Release v${{ github.run_number }}

            ### 📥 Quick Install
              Download the installer for your platform:
              - **Windows**: `OBSIDIAN-Neural-Installer.py` (requires Python 3.10+)
              - **macOS**: 
                - `OBSIDIAN-Neural-Installer-macOS.dmg` (double-click to mount, then run the installer)
                - `OBSIDIAN-Neural-Installer-macOS.pkg` (double-click to install system-wide)
              - **Linux**: `OBSIDIAN-Neural-Installer-Linux`

              ### 🎛️ VST3 Plugins (for DAWs)
              - **Windows**: `OBSIDIAN-Neural-Windows-VST3.zip`
              - **macOS**: `OBSIDIAN-Neural-macOS-VST3.zip`
              - **Linux**: `OBSIDIAN-Neural-Linux-VST3.tar.gz`

            ---

            ## 🪟 Windows Installation

            **Requirements:** Python 3.10+ installed from [python.org](https://python.org)

            1. **Download** `OBSIDIAN-Neural-Installer.py` from the assets below
            2. **Run** `python OBSIDIAN-Neural-Installer.py` 
            3. **Follow** the installation prompts

            The installer will automatically:
            - Set up virtual environment
            - Install all dependencies
            - Download AI models
            - Configure the system
            - Optionally build VST plugin

            **Alternative:** Clone the repo and run `python installer.py`

            ---

            ## 🍎 macOS Installation

            **⚠️ Important:** Files are not signed, so macOS will block them initially.

            ### Option 1: DMG (Recommended)
            1. **Download** `OBSIDIAN-Neural-Installer-macOS.dmg`
            2. **Double-click** the `.dmg` file to mount it
            3. **Double-click** `OBSIDIAN-Neural-Installer` in the opened window
            4. If blocked: **Right-click** → **Open** → **Open** again

            ### Option 2: PKG (System-wide)
            1. **Download** `OBSIDIAN-Neural-Installer-macOS.pkg`
            2. **Double-click** the `.pkg` file
            3. If blocked by Gatekeeper, run: `sudo spctl --master-disable`
            4. **Install** the package, then re-enable: `sudo spctl --master-enable`
            5. **Run** `obsidian-neural` from terminal

            ### Alternative: Terminal bypass
            ```bash
            # Remove quarantine attribute
            xattr -d com.apple.quarantine /path/to/downloaded/file
            ```

            ⚠️ Having issues? Please mention your macOS version when reporting problems.

          files: |
            OBSIDIAN-Neural-Installer-macOS.dmg
            OBSIDIAN-Neural-Installer-macOS.pkg
            OBSIDIAN-Neural-Installer-Linux
            OBSIDIAN-Neural-Installer.py
            OBSIDIAN-Neural-*-VST3.*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
