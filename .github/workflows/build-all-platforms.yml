name: Build VST - All Platforms

on:
  push:
    branches: [main, test-gcc-pyinstaller]
  pull_request:
    branches: [main, test-gcc-pyinstaller]

permissions:
  contents: write
  actions: read
  pull-requests: write

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup MSVC
        uses: microsoft/setup-msbuild@v1

      - name: Configure CMake
        working-directory: vst
        run: |
          cmake -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release

      - name: Build
        working-directory: vst
        run: |
          cmake --build build --config Release

      - name: Upload Windows VST
        uses: actions/upload-artifact@v4
        with:
          name: ObsidianNeural-Windows-VST3
          path: vst/build/ObsidianNeuralVST_artefacts/Release/VST3/

  build-macos:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          brew install cmake ninja

      - name: Configure CMake
        working-directory: vst
        run: |
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release

      - name: Build
        working-directory: vst
        run: |
          cmake --build build --config Release

      - name: Upload macOS VST
        uses: actions/upload-artifact@v4
        with:
          name: ObsidianNeural-macOS-VST3
          path: vst/build/ObsidianNeuralVST_artefacts/Release/VST3/

  build-linux:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake ninja-build \
            libasound2-dev \
            libx11-dev libxext-dev libxrandr-dev libxcomposite-dev \
            libxinerama-dev libxcursor-dev \
            libfreetype6-dev \
            libfontconfig1-dev \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libcurl4-openssl-dev

      - name: Configure CMake
        working-directory: vst
        run: |
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release

      - name: Build
        working-directory: vst
        run: |
          cmake --build build --config Release

      - name: Upload Linux VST
        uses: actions/upload-artifact@v4
        with:
          name: ObsidianNeural-Linux-VST3
          path: vst/build/ObsidianNeuralVST_artefacts/Release/VST3/

  build-python-executables:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: linux

          - os: macos-latest
            name: macos

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        shell: bash
        run: |
          pip install pillow pyinstaller

      - name: Build executables
        shell: bash
        run: |
          pyinstaller --onefile --name obsidian-server-${{ matrix.name }} server_interface.py
          pyinstaller --onefile --name obsidian-installer-${{ matrix.name }} installer.py

      - name: Upload Python executables
        uses: actions/upload-artifact@v4
        with:
          name: ObsidianNeural-Python-${{ matrix.name }}
          path: dist/

  commit-binaries:
    needs: [build-python-executables]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - name: Download Python artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ObsidianNeural-Python-*
          merge-multiple: false

      - name: Organize binaries
        run: |
          mkdir -p bin

          # Windows executables pris depuis le repo (build√©s en local)
          if [ -f "bin/obsidian-server-windows.exe" ]; then
            cp bin/obsidian-server-windows.exe bin/OBSIDIAN-Neural-Server.exe
          else
            echo "Warning: Windows executable not found in repo"
          fi

          # macOS et Linux depuis GitHub Actions
          if [ -d "ObsidianNeural-Python-macos" ]; then
            cp ObsidianNeural-Python-macos/obsidian-server-macos bin/OBSIDIAN-Neural-Server-macos
          fi

          if [ -d "ObsidianNeural-Python-linux" ]; then
            cp ObsidianNeural-Python-linux/obsidian-server-linux bin/OBSIDIAN-Neural-Server-linux
          fi

      - name: Commit binaries
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add bin/
          git commit -m "Update binaries [skip ci]" || exit 0
          git push

  create-release:
    needs:
      [
        build-windows,
        build-macos,
        build-linux,
        build-python-executables,
        commit-binaries,
      ]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create release assets
        run: |
          # VST3 plugins
          if [ -d "ObsidianNeural-Windows-VST3" ]; then
            cd ObsidianNeural-Windows-VST3
            zip -r ../OBSIDIAN-Neural-Windows-VST3.zip .
            cd ..
          fi

          if [ -d "ObsidianNeural-macOS-VST3" ]; then
            cd ObsidianNeural-macOS-VST3
            zip -r ../OBSIDIAN-Neural-macOS-VST3.zip .
            cd ..
          fi

          if [ -d "ObsidianNeural-Linux-VST3" ]; then
            cd ObsidianNeural-Linux-VST3
            tar -czf ../OBSIDIAN-Neural-Linux-VST3.tar.gz .
            cd ..
          fi

          # Python executables
          # Windows: depuis le repo (build√© en local)
          if [ -f "bin/obsidian-installer-windows.exe" ]; then
            cp bin/obsidian-installer-windows.exe ./OBSIDIAN-Neural-Installer-Windows.exe
          fi

          # macOS et Linux: depuis GitHub Actions
          if [ -d "ObsidianNeural-Python-macos" ]; then
            cp ObsidianNeural-Python-macos/obsidian-installer-macos ./OBSIDIAN-Neural-Installer-macOS
          fi

          if [ -d "ObsidianNeural-Python-linux" ]; then
            cp ObsidianNeural-Python-linux/obsidian-installer-linux ./OBSIDIAN-Neural-Installer-Linux
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: "OBSIDIAN-Neural v${{ github.run_number }}"
          body: |
            ## üéµ OBSIDIAN-Neural Release v${{ github.run_number }}

            ### üì• Quick Install
            Download the installer for your platform and run it:
            - **Windows**: `OBSIDIAN-Neural-Installer-Windows.exe` (run as admin)
            - **macOS**: `OBSIDIAN-Neural-Installer-macOS` 
            - **Linux**: `OBSIDIAN-Neural-Installer-Linux`

            ### üéõÔ∏è VST3 Plugins (for DAWs)
            - **Windows**: `OBSIDIAN-Neural-Windows-VST3.zip`
            - **macOS**: `OBSIDIAN-Neural-macOS-VST3.zip`
            - **Linux**: `OBSIDIAN-Neural-Linux-VST3.tar.gz`

            ### üîÑ Changes
            - Built from commit ${{ github.sha }}
            - Windows executables: Built locally for optimal antivirus compatibility
            - macOS/Linux executables: Built via GitHub Actions
          files: |
            OBSIDIAN-Neural-Installer-*.exe
            OBSIDIAN-Neural-Installer-macOS
            OBSIDIAN-Neural-Installer-Linux
            OBSIDIAN-Neural-*-VST3.*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
